import re
from datetime import datetime
from arabic_normlizer import ArabicNormalizer
from question_intent_analyzer import QuestionIntentAnalyzer
from knowledge_base import SpecializedKnowledgeBase

class AdvancedResponseHandler:
    def __init__(self, knowledge_base):
        self.kb = knowledge_base
        self.normalizer = ArabicNormalizer()
        self.intent_analyzer = QuestionIntentAnalyzer()
        self.conversation_history = []
    
    def process_user_input(self, user_input):
        """ูุนุงูุฌุฉ ูุชูุฏูุฉ ููุฏุฎูุงุช ุงููุณุชุฎุฏู ูุน ุงูุชุฎุตุต ุงูุฏููู"""
        user_input = user_input.strip()
        
        # ุญูุธ ุงููุญุงุฏุซุฉ
        self.conversation_history.append({
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "user_input": user_input,
            "response": None
        })
        
        # ุชุญููู ุงูููุฉ ูุงูููุถูุน
        intent = self.intent_analyzer.analyze_intent(user_input)
        topic = self.intent_analyzer.extract_main_topic(user_input)
        confidence = self.intent_analyzer.get_confidence_score(user_input, intent, topic)
        
        print(f"๐ ุชุญููู ุงูุณุคุงู: ุงูููุฉ={intent}, ุงูููุถูุน={topic}, ุงูุซูุฉ={confidence:.2f}")
        
        # ุงูุจุญุซ ุงููุชุฎุตุต
        response = self.get_specialized_response(user_input, intent, topic, confidence)
        
        # ุชุญุฏูุซ ุชุงุฑูุฎ ุงููุญุงุฏุซุฉ
        self.conversation_history[-1]["response"] = response
        
        return response
    
    def get_specialized_response(self, user_input, intent, topic, confidence):
        """ุงูุญุตูู ุนูู ุฑุฏ ูุชุฎุตุต ุจูุงุกู ุนูู ุงูุชุญููู"""
        
        # ุฅุฐุง ูุงู ุงูุชุญููู ูุงุถุญ ููุคูุฏ
        if confidence > 0.7 and topic and intent:
            specialized_response = self.kb.get_specialized_response(topic, intent)
            if specialized_response:
                return self.enhance_response_with_suggestions(specialized_response, topic, intent)
        
        # ุฅุฐุง ูุงู ุงูููุถูุน ูุงุถุญ ููู ุงูููุฉ ุบูุฑ ูุคูุฏุฉ
        if topic and confidence > 0.5:
            return self.get_topic_based_response(topic, intent)
        
        # ุงูุจุญุซ ุงูุชูููุฏู ูุฎุทุฉ ุงุญุชูุงุทูุฉ
        fallback_response = self.fallback_search(user_input)
        if fallback_response:
            return fallback_response
        
        # ุงูุฑุฏ ุงูุงูุชุฑุงุถู ุงููุญุณู
        return self.get_enhanced_default_response(user_input, intent, topic)
    
    def get_topic_based_response(self, topic, intent):
        """ุงูุญุตูู ุนูู ุฑุฏ ูุจูู ุนูู ุงูููุถูุน ุญุชู ูู ูุงูุช ุงูููุฉ ุบูุฑ ูุงุถุญุฉ"""
        
        # ุชุฑุชูุจ ุฃููููุฉ ุงูููุงุช
        intent_priority = ["treatment", "definition", "types", "symptoms"]
        
        # ุฌุฑุจ ุงูููุฉ ุงููุญุฏุฏุฉ ุฃููุงู
        if intent != "general":
            response = self.kb.get_specialized_response(topic, intent)
            if response:
                return response
        
        # ุฌุฑุจ ุงูููุงุช ุญุณุจ ุงูุฃููููุฉ
        for priority_intent in intent_priority:
            response = self.kb.get_specialized_response(topic, priority_intent)
            if response:
                return f"**ููุงุญุธุฉ**: ูู ุฃุฌุฏ ูุนูููุงุช ูุญุฏุฏุฉ ูุณุคุงููุ ููู ุฅููู ูุนูููุงุช ูููุฏุฉ ุนู {topic}:\n\n{response}"
        
        return None
    
    def enhance_response_with_suggestions(self, response, topic, intent):
        """ุชุญุณูู ุงูุฑุฏ ุจุฅุถุงูุฉ ุงูุชุฑุงุญุงุช ุฐุงุช ุตูุฉ"""
        
        suggestions = self.get_related_suggestions(topic, intent)
        
        if suggestions:
            response += "\n\n๐ก **ุงูุชุฑุงุญุงุช ุฅุถุงููุฉ ูุฏ ุชููู:**\n"
            for suggestion in suggestions:
                response += f"โข {suggestion}\n"
        
        return response
    
    def get_related_suggestions(self, topic, current_intent):
        """ุงูุญุตูู ุนูู ุงูุชุฑุงุญุงุช ุฐุงุช ุตูุฉ ุจุงูููุถูุน"""
        
        suggestions_map = {
            "ุงูุฅุฏุฑุงู": {
                "treatment": [
                    "ูู ุชุฑูุฏ ูุนุฑูุฉ ุชุฏุฑูุจุงุช ุงูุชูููุฒ ุงูุจุตุฑู ุงููุญุฏุฏุฉุ",
                    "ูู ุชุญุชุงุฌ ูุนูููุงุช ุนู ุงูุชุขุฒุฑ ุงูุจุตุฑู ุงูุญุฑููุ",
                    "ูู ุชุฑูุฏ ุชูุงุฑูู ููุฅุฏุฑุงู ุงูุณูุนูุ"
                ],
                "definition": [
                    "ูู ุชุฑูุฏ ูุนุฑูุฉ ุทุฑู ุนูุงุฌ ูุดุงูู ุงูุฅุฏุฑุงูุ",
                    "ูู ุชุญุชุงุฌ ูุนูููุงุช ุนู ุฃููุงุน ุงูุฅุฏุฑุงู ุงููุฎุชููุฉุ"
                ]
            },
            "ุงูุงูุชุจุงู": {
                "treatment": [
                    "ูู ุชุฑูุฏ ุชุฏุฑูุจุงุช ูุฒูุงุฏุฉ ูุฏุฉ ุงูุงูุชุจุงูุ",
                    "ูู ุชุญุชุงุฌ ุฃูุดุทุฉ ูุชุญุณูู ูุฑููุฉ ุงูุงูุชุจุงูุ",
                    "ูู ุชุฑูุฏ ุนูุงุฌ ูุดุงูู ุงูุชุดุชุช ุงููุญุฏุฏุฉุ"
                ],
                "definition": [
                    "ูู ุชุฑูุฏ ูุนุฑูุฉ ุทุฑู ุนูุงุฌ ูุดุงูู ุงูุงูุชุจุงูุ",
                    "ูู ุชุญุชุงุฌ ูุนูููุงุช ุนู ุฃููุงุน ุงูุงูุชุจุงู ุงููุฎุชููุฉุ"
                ]
            },
            "ุงูุฐุงูุฑุฉ": {
                "treatment": [
                    "ูู ุชุฑูุฏ ุชุฏุฑูุจุงุช ุงูุฐุงูุฑุฉ ูุตูุฑุฉ ุงููุฏูุ",
                    "ูู ุชุญุชุงุฌ ุชูุงุฑูู ุงูุฐุงูุฑุฉ ุงูุนุงููุฉ ุงููุชูุฏูุฉุ",
                    "ูู ุชุฑูุฏ ูุตุงุฆุญ ูุชุญุณูู ุงูุนูุงูู ุงููุคุซุฑุฉ ุนูู ุงูุฐุงูุฑุฉุ"
                ],
                "definition": [
                    "ูู ุชุฑูุฏ ูุนุฑูุฉ ุทุฑู ุนูุงุฌ ูุดุงูู ุงูุฐุงูุฑุฉุ",
                    "ูู ุชุญุชุงุฌ ูุนูููุงุช ุนู ุฃููุงุน ุงูุฐุงูุฑุฉ ุงููุฎุชููุฉุ"
                ]
            },
            "ุงููุชุงุจุฉ": {
                "treatment": [
                    "ูู ุชุฑูุฏ ุชูุงุตูู ุฃูุซุฑ ุนู ุทุฑููุฉ ุงูุชูููุทุ",
                    "ูู ุชุญุชุงุฌ ุชุฏุฑูุจุงุช ููุญุฑูู ุงููุชุดุงุจูุฉุ",
                    "ูู ุชุฑูุฏ ุจุฑูุงูุฌ ุฃุณุจูุนู ููุฅููุงุกุ"
                ]
            }
        }
        
        if topic in suggestions_map and current_intent in suggestions_map[topic]:
            return suggestions_map[topic][current_intent]
        
        return []
    
    def fallback_search(self, user_input):
        """ุงูุจุญุซ ุงูุงุญุชูุงุทู ูู ุญุงูุฉ ูุดู ุงูุชุญููู ุงููุชุฎุตุต"""
        normalized_input = self.normalizer.normalize(user_input)
        
        # ุงูุจุญุซ ูู ุฌููุน ุงูููุงุถูุน ูุงูููุงุช
        best_response = None
        max_score = 0
        
        for topic in self.kb.get_all_topics():
            for intent in self.kb.get_available_intents_for_topic(topic):
                topic_data = self.kb.knowledge_dict[topic][intent]
                score = 0
                
                for keyword in topic_data["keywords"]:
                    normalized_keyword = self.normalizer.normalize(keyword)
                    
                    if normalized_keyword in normalized_input:
                        score += 3
                    elif any(word in normalized_keyword for word in normalized_input.split()):
                        score += 1
                
                if score > max_score:
                    max_score = score
                    best_response = topic_data["response"]
        
        return best_response if max_score > 0 else None
    
    def get_enhanced_default_response(self, user_input, intent, topic):
        """ุฑุฏ ุงูุชุฑุงุถู ูุญุณู ูุน ุงูุชุฑุงุญุงุช ุฐููุฉ"""
        
        base_message = "ุนุฐุฑุงูุ ูู ุฃููู ุณุคุงูู ุจูุถูุญ."
        
        # ุงูุชุฑุงุญุงุช ุจูุงุกู ุนูู ุงูุชุญููู ุงูุฌุฒุฆู
        suggestions = []
        
        if topic:
            suggestions.append(f"**ูุจุฏู ุฃู ุณุคุงูู ูุชุนูู ุจู {topic}. ููููู ุงูุณุคุงู ุนู:**")
            if topic == "ุงูุฅุฏุฑุงู":
                suggestions.extend([
                    "โข ููู ุฃุนุงูุฌ ูุดุงูู ุงูุฅุฏุฑุงูุ",
                    "โข ูุง ูู ุงูุฅุฏุฑุงู ุงูุจุตุฑูุ",
                    "โข ุฃููุงุน ุงูุฅุฏุฑุงู ุงูุณูุนู"
                ])
            elif topic == "ุงูุงูุชุจุงู":
                suggestions.extend([
                    "โข ููู ุฃุนุงูุฌ ูุดุงูู ุงูุงูุชุจุงูุ",
                    "โข ูุง ูู ุงูุงูุชุจุงู ุงูุงูุชูุงุฆูุ",
                    "โข ุทุฑู ุชุญุณูู ูุฏุฉ ุงูุงูุชุจุงู"
                ])
            elif topic == "ุงูุฐุงูุฑุฉ":
                suggestions.extend([
                    "โข ููู ุฃุนุงูุฌ ูุดุงูู ุงูุฐุงูุฑุฉุ",
                    "โข ูุง ูู ุงูุฐุงูุฑุฉ ุงูุนุงููุฉุ",
                    "โข ุชุฏุฑูุจุงุช ุชูููุฉ ุงูุฐุงูุฑุฉ"
                ])
        
        if intent and intent != "general":
            if intent == "treatment":
                suggestions.append("**ูุจุฏู ุฃูู ุชุจุญุซ ุนู ุทุฑู ุงูุนูุงุฌ. ุฌุฑุจ:**")
                suggestions.extend([
                    "โข ููู ุฃุนุงูุฌ ูุดุงูู ุงูุฅุฏุฑุงูุ",
                    "โข ุทุฑู ุนูุงุฌ ุงูุงูุชุจุงู",
                    "โข ุชุฏุฑูุจุงุช ุชุญุณูู ุงูุฐุงูุฑุฉ"
                ])
        
        if not suggestions:
            suggestions = [
                "**๐ก ููููู ุงูุณุคุงู ุนู:**",
                "",
                "**ููุนูุงุฌ ูุงูุญููู:**",
                "โข ููู ุฃุนุงูุฌ ูุดุงูู ุงูุฅุฏุฑุงูุ",
                "โข ุทุฑู ุนูุงุฌ ุงูุงูุชุจุงู",
                "โข ููููุฉ ุชุญุณูู ุงููุชุงุจุฉ ูุงูุฅููุงุก",
                "",
                "**ููุชุนุฑููุงุช:**",
                "โข ูุง ูู ุงูุฅุฏุฑุงูุ",
                "โข ุชุนุฑูู ุงูุงูุชุจุงู",
                "โข ููููู ุงูุฐุงูุฑุฉ",
                "",
                "**ููุฃููุงุน ูุงูุชุตูููุงุช:**",
                "โข ุฃููุงุน ุงูุฅุฏุฑุงู",
                "โข ุฃููุงุน ูุดุงูู ุงูุงูุชุจุงู"
            ]
        
        return f"{base_message}\n\n" + "\n".join(suggestions) + "\n\n๐ **ุฌุฑุจ ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงู ุจูุถูุญ ุฃูุซุฑ**"
    
    def get_conversation_history(self):
        """ุฅุฑุฌุงุน ุชุงุฑูุฎ ุงููุญุงุฏุซุฉ"""
        return self.conversation_history
    
    def multi_level_search(self, user_input):
        """ุฏุงูุฉ ููุชูุงูู ูุน ุงูููุฏ ุงููุฏูู"""
        intent = self.intent_analyzer.analyze_intent(user_input)
        topic = self.intent_analyzer.extract_main_topic(user_input)
        
        if topic and topic in self.kb.knowledge_dict:
            return topic
        
        return None
